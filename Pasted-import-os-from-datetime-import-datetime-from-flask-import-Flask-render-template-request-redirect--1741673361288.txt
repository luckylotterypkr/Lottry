mport os
from datetime import datetime
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from sqlalchemy import func
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from apscheduler.schedulers.background import BackgroundScheduler
from pytz import timezone
import logging
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.secret_key = os.environ.get("FLASK_SECRET_KEY") or "lottery-secret-key"
app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get("DATABASE_URL")
app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
    "pool_recycle": 300,
    "pool_pre_ping": True,
}

db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

logging.basicConfig(level=logging.DEBUG)

# Import models after db initialization
from models import User, LotteryDraw, Feedback

def create_admin_if_not_exists():
    try:
        admin = User.query.filter_by(username='admin').first()
        if not admin:
            admin = User(
                username='admin',
                password_hash=User.set_password('admin123')
            )
            db.session.add(admin)
            db.session.commit()
            logging.info("Admin user created successfully")
        else:
            logging.info("Admin user already exists")
    except Exception as e:
        logging.error(f"Error creating admin user: {str(e)}")
        db.session.rollback()

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Routes
@app.route('/')
def index():
    latest_draw = LotteryDraw.query.order_by(LotteryDraw.date.desc()).first()
    first_prize = latest_draw.first_prize if latest_draw else []
    second_prizes = [latest_draw.second_prizes[i:i+4] for i in range(0, len(latest_draw.second_prizes), 4)] if latest_draw else []
    feedback_messages = Feedback.query.order_by(Feedback.date.desc()).limit(5).all()
    return render_template('index.html',
                         first_prize=first_prize,
                         second_prizes=second_prizes,
                         next_draw=get_next_draw_time(),
                         feedback_messages=feedback_messages)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')

        logging.debug(f"Login attempt for username: {username}")
        user = User.query.filter_by(username=username).first()

        if user and user.check_password(password):
            login_user(user)
            logging.info(f"User {username} logged in successfully")
            return redirect(url_for('admin'))

        logging.warning(f"Failed login attempt for username: {username}")
        flash('Invalid username or password')
    return render_template('login.html')

@ap
